Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 30 16:16:28 2021

@author: yf
"""

import numpy as np
import os,sys
import json5
import matplotlib.pyplot as plt
from obspy.imaging.beachball import beachball



#%% 1.input path
sample_path      = '../files/1d-histogram'

MPI_n=30                                                                         # 第一次试验：其中 MPI-3 与 MPI-9 采样陷入了极小值，从0开始数 || 第二次实验：MPI-24
MPI_n_st           = 0
Chains_n_st        = 0
num_bins=50
N = 2000                                                                        # 从第几个开始画






#%% 2.read data
FM_all=[]
for i in range(0,MPI_n,1):
    if i!=4 and i!=12 and i!=15:
        rank_path = os.path.join(sample_path,'Output_'+'rand_'+str(i),'rank_'+str(MPI_n_st)+'_output')
        FM_path   = os.path.join(rank_path,'chain_'+str(Chains_n_st)+'_FM_2_accept_all')
        FM        = np.loadtxt(FM_path)
        FM_all.append(FM)

FM1=[];FM2=[]
LM1=[];LM2=[]

MPI_n = MPI_n-3

## 2.1 纠正 strike/rake 的周期跳跃问题
for i in range(0,MPI_n,1):
    for k in range(1,4,1):
        for j in range(0,FM_all[i].shape[0]):
            if k==1:                                                        # strike 周期跳跃
                if FM_all[i][j,k]>360 and FM_all[i][j,k]<720:
                    FM_all[i][j,k]=FM_all[i][j,k]-360
                if FM_all[i][j,k]<0 and FM_all[i][j,k]>(-360):
                    FM_all[i][j,k]=FM_all[i][j,k]+360
            if k==3:                                                         # rake 周期跳跃
                if FM_all[i][j,k]>120:
                    FM_all[i][j,k]=FM_all[i][j,k]-360

## 2.2 分为4组解
for i in range(0,MPI_n,1):
    strike_mean = FM_all[i][:,1].mean()
    if strike_mean>100 and strike_mean<150:  # FM1
        FM1.append(i)
    if strike_mean>0 and strike_mean<80:  # FM5
        FM2.append(i)
    if strike_mean>300 and strike_mean<360:  # LM1
        LM1.append(i)
    if strike_mean>200 and strike_mean<250:  # LM2
        LM2.append(i)
    if strike_mean>250 and strike_mean<300:  # LM2    #                         找到未收敛的 core 每次可能不一样！！
        # print(i)
        pass

## 2.3 计算4组解的平均值
LM1_mu_all=[]
LM1_sigma_all=[]
for i in LM1:
    mu_all=[]
    sigma_all=[]
    for k in range(0,8,1):
        mu=np.around(np.mean(FM_all[i][N:,k]), decimals=5)                        # Keep two decimal places
        sigma =np.around(np.std(FM_all[i][N:,k]), decimals=5)
        mu_all.append(mu)
        sigma_all.append(sigma)
    LM1_mu_all.append(mu_all)
    LM1_sigma_all.append(sigma_all)
LM1_mu=np.around(np.mean(LM1_mu_all,axis=0),decimals=2)
LM1_sigma=np.around(np.mean(LM1_sigma_all,axis=0),decimals=2)


LM2_mu_all=[]
LM2_sigma_all=[]
for i in LM2:
    mu_all=[]
    sigma_all=[]
    for k in range(0,8,1):
        mu=np.around(np.mean(FM_all[i][N:,k]), decimals=5)                        # Keep two decimal places
        sigma =np.around(np.std(FM_all[i][N:,k]), decimals=5)
        mu_all.append(mu)
        sigma_all.append(sigma)
    LM2_mu_all.append(mu_all)
    LM2_sigma_all.append(sigma_all)
LM2_mu=np.around(np.mean(LM2_mu_all,axis=0),decimals=2)
LM2_sigma=np.around(np.mean(LM2_sigma_all,axis=0),decimals=2)


FM1_mu_all=[]
FM1_sigma_all=[]
for i in FM1:
    mu_all=[]
    sigma_all=[]
    for k in range(0,8,1):
        mu=np.around(np.mean(FM_all[i][N:,k]), decimals=5)                        # Keep two decimal places
        sigma =np.around(np.std(FM_all[i][N:,k]), decimals=5)
        mu_all.append(mu)
        sigma_all.append(sigma)
    FM1_mu_all.append(mu_all)
    FM1_sigma_all.append(sigma_all)
FM1_mu=np.around(np.mean(FM1_mu_all,axis=0),decimals=2)
FM1_sigma=np.around(np.mean(FM1_sigma_all,axis=0),decimals=2)


FM2_mu_all=[]
FM2_sigma_all=[]
for i in FM2:
    mu_all=[]
    sigma_all=[]
    for k in range(0,8,1):
        mu=np.around(np.mean(FM_all[i][N:,k]), decimals=5)                        # Keep two decimal places
        sigma =np.around(np.std(FM_all[i][N:,k]), decimals=5)
        mu_all.append(mu)
        sigma_all.append(sigma)
    FM2_mu_all.append(mu_all)
    FM2_sigma_all.append(sigma_all)

FM2_mu=np.around(np.mean(FM2_mu_all,axis=0),decimals=2)
FM2_sigma=np.around(np.mean(FM2_sigma_all,axis=0),decimals=2)




#%% 3. plot
fig, axs = plt.subplots(4, 2, dpi=800,figsize=(9, 13))
plt.rcParams['font.sans-serif'] = ['Times New Roman']
fig.subplots_adjust(wspace =0.2, hspace =0.5)
for k in range(0,8,1):
    s1 = k//2
    s2 = k%2
    for i in range(0,MPI_n,1):
        # if i!=3 and i!=9:
        if i!=24:
            mu=np.around(np.mean(FM_all[i][N:,k]), decimals=5)                        # Keep two decimal places
            sigma =np.around(np.std(FM_all[i][N:,k]), decimals=5)
        
            if i in FM1:
                facecolor = 'navajowhite'
            elif i in FM2:
                facecolor = 'navajowhite'
            elif i in LM1:
                facecolor = 'lightsteelblue'
            else:
                facecolor = 'lightsteelblue'
            n, bins, patches = axs[s1,s2].hist(FM_all[i][N:,k], num_bins, density=True,histtype='stepfilled', facecolor=facecolor,alpha=0.7)

            y = ((1 / (np.sqrt(2 * np.pi) * sigma)) *
                 np.exp(-0.5 * (1 / sigma * (bins - mu))**2))
            axs[s1,s2].plot(bins, y, '--',color=facecolor,linewidth=0.5)                      # Draw a Gaussian fitting curve


    if k==0:
        # axs[s1,s2].text(5, max(y),  str(f'FM1:{FM1_mu[0]}\nFM2:{FM2_mu[0]}\nLM1:{LM1_mu[0]}\nLM2:{LM2_mu[0]}'), 
        # #                 style='italic', fontsize=15,verticalalignment='center',
        # horizontalalignment='center',bbox = dict(facecolor = "orange", alpha = 0.6))
        axs[s1,s2].set_xlim(5,8)
        axs[s1,s2].set_xlabel('Mw', fontsize=12)
    if k==1:
        axs[s1,s2].set_xlim(0,360)
        axs[s1,s2].set_xlabel('Strike/°', fontsize=12)
    if k==2:
        axs[s1,s2].set_xlim(0,90)
        axs[s1,s2].set_xlabel('Dip/°', fontsize=12)
    if k==3:
        axs[s1,s2].set_xlim(-250,100)
        axs[s1,s2].set_xlabel('Rake/°', fontsize=12)
    if k==4:
        axs[s1,s2].set_xlim(25,26)
        axs[s1,s2].set_xlabel('Latitude/°', fontsize=12)
    if k==5:
        axs[s1,s2].set_xlim(99.4,100.6)
        axs[s1,s2].set_xlabel('Longtitude/°', fontsize=12)
    if k==6:
        axs[s1,s2].set_xlim(0,30)
        axs[s1,s2].set_xlabel('Depth/km', fontsize=12)
    if k==7:
        axs[s1,s2].set_xlim(-10,10)
        axs[s1,s2].set_xlabel('T0/s', fontsize=12)
    axs[s1,s2].spines['bottom'].set_visible(True)
    axs[s1,s2].spines['top'].set_visible(False)                   # Coordinate boxes are not displayed
    axs[s1,s2].spines['right'].set_visible(False) 
    axs[s1,s2].spines['left'].set_visible(False)
    axs[s1,s2].get_yaxis().set_visible(False)

# fig.savefig('./pdf/randFM.pdf', dpi=800, format='pdf')





#%% 4. beachball
# fig = beachball(FM1_mu[1:4], size=200, linewidth=1, facecolor='g')
# fig.savefig('./pdf/FM1.pdf', dpi=800, format='pdf')

# fig = beachball(FM2_mu[1:4], size=200, linewidth=1, facecolor='g')
# fig.savefig('./pdf/FM2.pdf', dpi=800, format='pdf')

# fig = beachball(LM1_mu[1:4], size=200, linewidth=1, facecolor='g')
# fig.savefig('./pdf/LM1.pdf', dpi=800, format='pdf')

# fig = beachball(LM2_mu[1:4], size=200, linewidth=1, facecolor='g')
# fig.savefig('./pdf/LM2.pdf', dpi=800, format='pdf')





#%% 5. save
# fp = open(os.path.join('./pdf/FM_mu_sigma.txt'), 'w')
# for m in range(0,len(FM1_mu)):
#     fp.write(str(FM1_mu[m]))
#     fp.write('\t')
#     fp.write(str(FM1_sigma[m]))
#     fp.write('\t')
# fp.write('\n')
# for m in range(0,len(FM2_mu)):
#     fp.write(str(FM2_mu[m]))
#     fp.write('\t')
#     fp.write(str(FM2_sigma[m]))
#     fp.write('\t')
# fp.write('\n')
# for m in range(0,len(LM1_mu)):
#     fp.write(str(LM1_mu[m]))
#     fp.write('\t')
#     fp.write(str(LM1_sigma[m]))
#     fp.write('\t')
# fp.write('\n')
# for m in range(0,len(LM2_mu)):
#     fp.write(str(LM2_mu[m]))
#     fp.write('\t')
#     fp.write(str(LM2_sigma[m]))
#     fp.write('\t')
# fp.write('\n')
# fp.close()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn [2], line 11[0m
[1;32m      9[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m     10[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m[38;5;241m,[39m[38;5;21;01msys[39;00m
[0;32m---> 11[0m [38;5;28;01mimport[39;00m [38;5;21;01mjson5[39;00m
[1;32m     12[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mobspy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mimaging[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbeachball[39;00m [38;5;28;01mimport[39;00m beachball

[0;31mModuleNotFoundError[0m: No module named 'json5'
ModuleNotFoundError: No module named 'json5'

