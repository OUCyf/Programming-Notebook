Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 25 22:44:49 2021

@author: yf
"""

import pygmt
import numpy as np
import os,glob,obspy
from obspy import Stream
from obspy.taup import TauPyModel
from obspy.taup.taup_create import build_taup_model


#%% 1. data/file paths
allfiles_path = os.path.join('../files/yangbi/*.SAC')             # 某个地震事件的文件夹，通配所有SAC数据
limiting_sta = ['XG.CHT','XG.HDQ','XG.XBT','XG.ZYT','YN.TUS','YN.YUX']         # 限幅的台站名称

#%% 2.读取原始数据 return: data
allfiles = sorted( glob.glob(allfiles_path) )
data_raw = Stream()
for i in range(0,len(allfiles),1):
    tr = obspy.read(allfiles[i])
    data_raw += tr
data = data_raw.copy()

#%% 3.读取台站的经纬度信息
lons = []; lats = []; net = []; sta = []; names = []
unique_stations = np.unique([tr.stats.station for tr in data])                  # 所有台站的名称
for station in unique_stations:
    tr = data.select(station=station)[0]                                        # Just taking the first Trace if multiple
    lons.append(tr.stats.sac.stlo)
    lats.append(tr.stats.sac.stla)
    net.append(tr.stats.network)
    sta.append(tr.stats.station)
    names.append(f'{tr.stats.network}.{tr.stats.station}')                      # 所有台站台网的名称
evlo = tr.stats.sac.evlo # 地震位置
evla = tr.stats.sac.evla


# 3.1 Determine a nice, padded region
# region = [np.min(lons), np.max(lons), np.min(lats), np.max(lats)]
# x_pad = (region[1] - region[0]) * 0.1
# y_pad = (region[3] - region[2]) * 0.1
# region = [region[0] - x_pad, region[1] + x_pad, region[2] - y_pad, region[3] + y_pad]
region = [96.5, 107, 21, 29.5]                                                    # 手动指定 region 范围

# 3.2 Determine a nice stereographic projection
lon_0 = np.mean(region[:2])
lat_0 = np.mean(region[2:])
if lat_0 > 0:
    ref_lat = 90
else:
    ref_lat = -90
projection = f'S{lon_0}/{ref_lat}/6i'
# projection = f'M{lon_0}/{lat_0}/6i'


#%% 4. pygmt plot
fig = pygmt.Figure()                                                            # Create figure
# 4.1 画行政边界图
fig.coast(region=region,                                                        # pygmt coast
          projection=projection,
          shorelines=True,
          water='lightblue',
          land='lightgrey',
          borders=[1, 2],
          frame=['a2',"WSEN"])

# # 4.2 画台站图
for i in range(0,len(names),1):
    if names[i] in limiting_sta:
        color = 'red'
        legend_red_index = i
    else:
        color = 'blue'
        legend_blue_index = i
    fig.plot(x=lons[i],                                                                  # pygmt plot 画台站
              y=lats[i],
              style='i0.1i',
              color=color,
              pen=True)

# 4.3 画legend需要的label
fig.plot(x=lons[legend_red_index],                                                                  # pygmt plot 画台站
          y=lats[legend_red_index],
          style='i0.1i',
          color='red',
          pen=True,
          label="Clipped_data+S0.25c")                                                                     # lagend 里面必须得加_,否则把空格当成文件，会报错
fig.plot(x=lons[legend_blue_index],                                                                  # pygmt plot 画台站
          y=lats[legend_blue_index],
          style='i0.1i',
          color='blue',
          pen=True,
          label="Normal_data+S0.25c")

# 4.4 标注台站名称 
fig.text(text=names,                                                            # pygmt text 台站名称
          x=lons,
          y=lats,
          xshift ='0.2c',
          yshift ='0.2c',
          font="5p,Helvetica-Bold,white",
          fill="orange",
          transparency=20)

# 4.5 画地震的五角星
fig.plot(x=evlo,                                                                  # pygmt plot 画台站
          y=evla,
          style='a0.3i',
          color='yellow',
          pen=True,)

# 4.6 画震源机制
focal_mechanism = dict(strike=138, dip=76, rake=-170, magnitude=6.7)            # store focal mechanisms parameters in a dict
fig.meca(focal_mechanism,                                                       # pygmt meca 画沙滩球
          scale="1.0c",
          longitude=98.5,
          latitude=26.6,
          depth=12.0,
          G='red')

# 4.7 画 箭头
fig.plot(x=evlo, 
          y=evla, 
          style="v0.3c+eA+a30", 
          direction=([145], [1.6]), 
          pen="0.8p"
          )

# 4.8 添加图例
fig.legend(spec=None, position="JTR+jTR+o1.5c/0.7c", box='+gwhite+p0.5p')

# 4.9 画插图
with fig.inset(position="jTL+w3c/2.3c+o1.0c/0.5c", box="+pblack"):
    # Use a plotting function to create a figure inside the inset
    fig.coast(
        region=[70, 135, 15, 55],
        projection="M105/42.5/3c",  #"M3c",
        land="white",
        borders=[1, 2],
        shorelines="1/thin",
        water="white",
        # Use dcw to selectively highlight an area
        # dcw="US.MA+gred",
    )
    
    fig.plot(x=tr.stats.sac.evlo,                                                                  # pygmt plot 画台站
          y=tr.stats.sac.evla,
          style='a0.15i',
          color='red',
          pen=True,)

#%% 5 保存图片
# fig.savefig("STA_location_yangbi.pdf")                                             # pygmt savefig 保存图片
fig.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mGMTCLibNotFoundError[0m                      Traceback (most recent call last)
Cell [0;32mIn [1], line 9[0m
[1;32m      1[0m [38;5;66;03m#!/usr/bin/env python3[39;00m
[1;32m      2[0m [38;5;66;03m# -*- coding: utf-8 -*-[39;00m
[1;32m      3[0m [38;5;124;03m"""[39;00m
[1;32m      4[0m [38;5;124;03mCreated on Tue May 25 22:44:49 2021[39;00m
[1;32m      5[0m 
[1;32m      6[0m [38;5;124;03m@author: yf[39;00m
[1;32m      7[0m [38;5;124;03m"""[39;00m
[0;32m----> 9[0m [38;5;28;01mimport[39;00m [38;5;21;01mpygmt[39;00m
[1;32m     10[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m     11[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m[38;5;241m,[39m[38;5;21;01mglob[39;00m[38;5;241m,[39m[38;5;21;01mobspy[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/__init__.py:74[0m
[1;32m     71[0m __commit__ [38;5;241m=[39m __version__[38;5;241m.[39msplit([38;5;124m"[39m[38;5;124m+g[39m[38;5;124m"[39m)[[38;5;241m-[39m[38;5;241m1[39m] [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124m+g[39m[38;5;124m"[39m [38;5;129;01min[39;00m __version__ [38;5;28;01melse[39;00m [38;5;124m"[39m[38;5;124m"[39m  [38;5;66;03m# 0ab3cd78[39;00m
[1;32m     73[0m [38;5;66;03m# Start our global modern mode session[39;00m
[0;32m---> 74[0m [43m_begin[49m[43m([49m[43m)[49m
[1;32m     75[0m [38;5;66;03m# Tell Python to run _end when shutting down[39;00m
[1;32m     76[0m _atexit[38;5;241m.[39mregister(_end)

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/session_management.py:16[0m, in [0;36mbegin[0;34m()[0m
[1;32m      8[0m [38;5;124;03m"""[39;00m
[1;32m      9[0m [38;5;124;03mInitiate a new GMT modern mode session.[39;00m
[1;32m     10[0m 
[0;32m   (...)[0m
[1;32m     13[0m [38;5;124;03mOnly meant to be used once for creating the global session.[39;00m
[1;32m     14[0m [38;5;124;03m"""[39;00m
[1;32m     15[0m prefix [38;5;241m=[39m [38;5;124m"[39m[38;5;124mpygmt-session[39m[38;5;124m"[39m
[0;32m---> 16[0m [38;5;28;01mwith[39;00m Session() [38;5;28;01mas[39;00m lib:
[1;32m     17[0m     lib[38;5;241m.[39mcall_module(module[38;5;241m=[39m[38;5;124m"[39m[38;5;124mbegin[39m[38;5;124m"[39m, args[38;5;241m=[39mprefix)
[1;32m     18[0m     [38;5;66;03m# pygmt relies on GMT modern mode with GMT_COMPATIBILITY at version 6[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/clib/session.py:187[0m, in [0;36mSession.__enter__[0;34m(self)[0m
[1;32m    174[0m [38;5;28;01mdef[39;00m [38;5;21m__enter__[39m([38;5;28mself[39m):
[1;32m    175[0m     [38;5;124;03m"""[39;00m
[1;32m    176[0m [38;5;124;03m    Create a GMT API session and check the libgmt version.[39;00m
[1;32m    177[0m 
[0;32m   (...)[0m
[1;32m    185[0m [38;5;124;03m        raising the exception.[39;00m
[1;32m    186[0m [38;5;124;03m    """[39;00m
[0;32m--> 187[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcreate[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mpygmt-session[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m    188[0m     [38;5;66;03m# Need to store the version info because 'get_default' won't work after[39;00m
[1;32m    189[0m     [38;5;66;03m# the session is destroyed.[39;00m
[1;32m    190[0m     version [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39minfo[[38;5;124m"[39m[38;5;124mversion[39m[38;5;124m"[39m]

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/clib/session.py:334[0m, in [0;36mSession.create[0;34m(self, name)[0m
[1;32m    331[0m [38;5;28;01mexcept[39;00m GMTCLibNoSessionError:
[1;32m    332[0m     [38;5;28;01mpass[39;00m
[0;32m--> 334[0m c_create_session [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mget_libgmt_func[49m[43m([49m
[1;32m    335[0m [43m    [49m[38;5;124;43m"[39;49m[38;5;124;43mGMT_Create_Session[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    336[0m [43m    [49m[43margtypes[49m[38;5;241;43m=[39;49m[43m[[49m[43mctp[49m[38;5;241;43m.[39;49m[43mc_char_p[49m[43m,[49m[43m [49m[43mctp[49m[38;5;241;43m.[39;49m[43mc_uint[49m[43m,[49m[43m [49m[43mctp[49m[38;5;241;43m.[39;49m[43mc_uint[49m[43m,[49m[43m [49m[43mctp[49m[38;5;241;43m.[39;49m[43mc_void_p[49m[43m][49m[43m,[49m
[1;32m    337[0m [43m    [49m[43mrestype[49m[38;5;241;43m=[39;49m[43mctp[49m[38;5;241;43m.[39;49m[43mc_void_p[49m[43m,[49m
[1;32m    338[0m [43m[49m[43m)[49m
[1;32m    340[0m [38;5;66;03m# Capture the output printed by GMT into this list. Will use it later[39;00m
[1;32m    341[0m [38;5;66;03m# to generate error messages for the exceptions raised by API calls.[39;00m
[1;32m    342[0m [38;5;28mself[39m[38;5;241m.[39m_error_log [38;5;241m=[39m []  [38;5;66;03m# pylint: disable=attribute-defined-outside-init[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/clib/session.py:286[0m, in [0;36mSession.get_libgmt_func[0;34m(self, name, argtypes, restype)[0m
[1;32m    249[0m [38;5;124;03m"""[39;00m
[1;32m    250[0m [38;5;124;03mGet a ctypes function from the libgmt shared library.[39;00m
[1;32m    251[0m 
[0;32m   (...)[0m
[1;32m    282[0m [38;5;124;03m<class 'ctypes.CDLL.__init__.<locals>._FuncPtr'>[39;00m
[1;32m    283[0m [38;5;124;03m"""[39;00m
[1;32m    284[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m"[39m[38;5;124m_libgmt[39m[38;5;124m"[39m):
[1;32m    285[0m     [38;5;66;03m# pylint: disable=attribute-defined-outside-init[39;00m
[0;32m--> 286[0m     [38;5;28mself[39m[38;5;241m.[39m_libgmt [38;5;241m=[39m [43mload_libgmt[49m[43m([49m[43m)[49m
[1;32m    287[0m function [38;5;241m=[39m [38;5;28mgetattr[39m([38;5;28mself[39m[38;5;241m.[39m_libgmt, name)
[1;32m    288[0m [38;5;28;01mif[39;00m argtypes [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/pygmt/clib/loading.py:59[0m, in [0;36mload_libgmt[0;34m(lib_fullnames)[0m
[1;32m     56[0m         failing_libs[38;5;241m.[39mappend(libname)
[1;32m     58[0m [38;5;28;01mif[39;00m error:
[0;32m---> 59[0m     [38;5;28;01mraise[39;00m GMTCLibNotFoundError([38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m[38;5;241m.[39mjoin(error_msg))
[1;32m     61[0m [38;5;28;01mreturn[39;00m libgmt

[0;31mGMTCLibNotFoundError[0m: Error loading GMT shared library at 'libgmt.so'.
libgmt.so: cannot open shared object file: No such file or directory
GMTCLibNotFoundError: Error loading GMT shared library at 'libgmt.so'.
libgmt.so: cannot open shared object file: No such file or directory

